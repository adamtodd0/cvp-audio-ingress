trigger: none
schedules:
- cron: '0 1 * * *'
  displayName: 'daily run'
  branches:
    include: [ 'refs/heads/master' ]
  always: true

parameters:
  - name: envs
    displayName: Environments
    type: object
    values: []
    default: ['sbox']



stages:
  - stage: Build
    jobs:
      - job: BasicValidation
        steps:
          - template: pipeline/steps/tf-install.yaml
          - template: pipeline/steps/tf-init.yaml
            parameters:
              useBackend: false
          - task: TerraformCLI@0
            displayName: Validate Terraform
            inputs:
              command: 'validate'
              commandOptions: '-no-color'
          - script: terraform fmt -check=true
            displayName: Check Formatting

  - ${{each env in parameters.envs}}:
    - stage: 'Plan${{env}}'
      displayName: 'Plan ${{env}}'
      dependsOn: Build
      variables:
        - template: pipeline/variables-common.yaml
        - template: pipeline/variables-${{env}}.yaml
        - group: cvp-${{env}}
      jobs:
        - job: PlanToEnv${{env}}
          displayName: 'Plan to ${{env}}'
          steps:

            - template: pipeline/steps/tf-init.yaml
              parameters:
                useBackend: true

            - template: pipeline/steps/tf-plan.yaml
              parameters:
                subscriptionName: ${{variables.subscriptionName}}
                env: ${{variables.env)
                certName: ${{variables.certName}}
                location: ${{variables.location}}
                product: ${{variables.product}}
                builtFrom: $(Build.Repository.Name)
                # Manually passed in for use in scripts where resources are tagged
                businessArea: ${{variables.businessArea}}
                application: ${{variables.application}}
  
  - ${{each env in parameters.envs}}:
    - stage: 'Validate${{env}}'
      displayName: 'Validate ${{env}}'
      dependsOn: 'Plan${{env}}'
      variables:
        - template: pipeline/variables-common.yaml
        - template: pipeline/variables-${{env}}.yaml
        - group: cvp-${{env}}
      jobs:
        - job: ValidateChanges${{env}}
          displayName: '${{env}} Terraform changes'
          steps: 
            - download: current
              artifact: '${{ parameters.env }}.tfplan'
              displayName: 'Download ${{ parameters.env }} Plan file'

            - template: pipeline/steps/tf-show.yml
              parameters: 
                planOrStateFilePath: "$(Pipeline.Workspace)/${{ parameters.env }}.tfplan/${{ parameters.env }}.tfplan"
                outputLocation: "$(Pipeline.Workspace)/${{ parameters.env }}.json"

            - task: PowerShell@2
              name: 'terraChanges'
              displayName: 'Validate any changes'
              inputs:
                targetType: 'inline'
                script: |
                  $environment = "${{env}}"
                  $planObj = Get-Content "$(Pipeline.Workspace)/${{ parameters.env }}.json" | ConvertFrom-Json
                  $resourceChanges = $planObj.resource_changes

                  $addChanges = ($resourceChanges | Where {$_.change.actions -contains "create"}).length
                  $changeChanges = ($resourceChanges | Where {$_.change.actions -contains "update"}).length
                  $removeChanges = ($resourceChanges | Where {$_.change.actions -contains "delete"}).length
                  $totalChanges = $addChanges + $changeChanges + $removeChanges

                  $msg = "There are $totalChanges ($addChanges to add, $changeChanges to change, $removeChanges to remove) in the $environment Environment on CVP Audio Ingress"
                  Write-Host $msg

                  $sendMsg = (&{If($addChanges -gt 0 -or $changeChanges -gt 0 -or $removeChanges -gt 0) {"true"} Else {"false"}})
                  Write-Host "Should send message: $sendMsg"

                  Write-Host "##vso[task.setvariable variable=sendMsg;isOutput=true]$sendMsg"
                  Write-Host "##vso[task.setvariable variable=msg;isOutput=true]$msg"
            
            - template: pipeline/steps/send-im.yml
              parameters:
                hookUrl: ${{variables.slackWebHook}}
                title: "Terraform Changes in ${{env}}"
                message: "$(terraChanges.msg)"
                emojiIcon: ":heavy_exclamation_mark:"
                conditionAction: $(terraChanges.sendMsg)