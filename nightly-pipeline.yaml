trigger: none
schedules:
- cron: '0 1 * * *'
  displayName: 'daily run'
  branches:
    include: [ 'refs/heads/master' ]
  always: true

parameters:
  - name: env
    displayName: Environment to Deploy to
    type: string
    default: sbox
    values:
      - sbox
      - stg
      - prod

variables:
  - template: pipeline/variables-common.yaml
  - ${{ if ne(parameters.env, 'prod') }}:
    - template: pipeline/variables-${{parameters.env}}.yaml
    - group: cvp-${{parameters.env}}
  - ${{ if and(contains(variables['Build.SourceBranch'], 'refs/heads/master'), eq(parameters.env, 'prod')) }}:
    # Production (prod)
    - template: pipeline/variables-prod.yaml
    - group: cvp-prod

stages:
  - stage: Build
    jobs:
      - job: BasicValidation
        steps:
          - template: pipeline/steps/tf-install.yaml
          - template: pipeline/steps/tf-init.yaml
            parameters:
              useBackend: false
          - task: TerraformCLI@0
            displayName: Validate Terraform
            inputs:
              command: 'validate'
              commandOptions: '-no-color'
          - script: terraform fmt -check=true
            displayName: Check Formatting

  - stage: Plan
    dependsOn: Build
    jobs:
      - job: PlanToEnv
        displayName: 'Plan to ${{parameters.env}}'
        steps:

          - template: pipeline/steps/tf-init.yaml
            parameters:
              useBackend: true

          - template: pipeline/steps/tf-plan.yaml
            parameters:
              subscriptionName: $(subscriptionName)
              env: $(env)
              certName: $(certName)
              location: $(location)
              product: $(product)
              builtFrom: $(Build.Repository.Name)
              # Manually passed in for use in scripts where resources are tagged
              businessArea: $(businessArea)
              application: $(application)
              additionalTerraformCommands: "-json"
  
  - stage: Validate
    dependsOn: Plan
    jobs:
      - job: ValidateChanges
        displayName: 'Validate outstanding Terraform changes'
        steps: 
          - download: current
            artifact: '${{ parameters.env }}.tfplan'
            displayName: 'Download ${{ parameters.env }} Plan file'

          - powershell: |
              $planObj = Get-Content "$(Pipeline.Workspace)/${{ parameters.env }}.tfplan/${{ parameters.env }}.tfplan.json" | ConvertFrom-Json

              $addChanges = $planObj.changes.add
              $changeChanges = $planObj.changes.change
              $removeChanges = $planObj.changes.remove

              $msg = "There are $addChanges to add, $changeChanges to change, $removeChanges to remove in the ${{parameters.env}} Environment on CVP Audio Ingress"
              Write-Host $msg

              $sendMsg = (&{If($addChanges -gt 0 -or $changeChanges -gt 0 -or $removeChanges -gt 0) {"true"} Else {"false"}})

              $icon = (&{If("${{parameters.env}}" -eq 'prod' ) {":bangbang:"} Else {":heavy_exclamation_mark:"}})

              Write-Host "##vso[task.setvariable variable=sendMsg]$sendMsg"
              Write-Host "##vso[task.setvariable variable=msg]$msg"
              Write-Host "##vso[task.setvariable variable=icon]$icon"
            name: 'terraChanges'
            displayName: 'Validate any changes'
          
          - template: pipeline/steps/send-im.yml
            condition: and(succeeded(), eq(terraChanges.sendMsg, 'true'))
            parameters:
              hookUrl:
              username:
              message: "$(terraChanges.msg)"
              emojiIcon: "$(terraChanges.icon)"