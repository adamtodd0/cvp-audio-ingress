parameters:
  - name: subscriptionName
    type: string
  - name: env
    type: string
  - name: certName
    type: string
  - name: location
    type: string
  - name: product
    type: string
  - name: builtFrom
    type: string
  - name: businessArea
    type: string
  - name: application
    type: string
  - name: workingDirectory
    type: string
    default: $(system.defaultWorkingDirectory)

steps:
  - task: AzurePowerShell@5
    displayName: 'Get Service Principal Details'
    inputs:
      azureSubscription: 'DTS-SHAREDSERVICES-SBOX'
      ScriptType: 'InlineScript'
      Inline: |
        $Context = Get-AzContext
        $AzureDevOpsServicePrincipal = Get-AzADServicePrincipal -ApplicationId $Context.Account.Id
        $ObjectId = $AzureDevOpsServicePrincipal.Id

        echo "##vso[task.setvariable variable=oid]$ObjectId"
      azurePowerShellVersion: 'LatestVersion'
      pwsh: true
  
  - task: AzureCLI@2
    displayName: 'Set Variables'
    inputs:
      azureSubscription: '${{ parameters.subscriptionName }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        rgName="${{ parameters.product }}-sharedinfra-${{ parameters.env }}"
        kvName="${{ parameters.product }}-${{ parameters.env }}-kv"
        
        echo "##vso[task.setvariable variable=rgName]$rgName"
        echo "##vso[task.setvariable variable=kvName]$kvName"
        
  ##TODO: move to Terraform
  - task: AzureCLI@2
    displayName: 'Create Shared Resource Group'
    inputs:
      azureSubscription: '${{ parameters.subscriptionName }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        rgName="$(rgName)"
        oid=$(oid)
        echo "Logged in as oid $oid"

        echo "Creating Shared RG $rgName"
        tags="businessArea=${{ parameters.businessArea }} application=${{ parameters.application }} builtFrom=${{ parameters.builtFrom }} environment=${{ parameters.env }}"
        az group create --location ${{ parameters.location }} --name $rgName  --subscription ${{ parameters.subscriptionName }} --tags $tags
  
  ##TODO: move to Terraform
  - task: AzureCLI@2
    displayName: 'Create Shared Key Vault'
    name: 'keyvault'
    inputs:
      azureSubscription: '${{ parameters.subscriptionName }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        rgName="$(rgName)"
        kvName="$(kvName)"
        oid=$(oid)
        echo "Logged in as oid $oid"
        
        echo "Creating Shared KV $kvName"
        newKv=$(az keyvault create --location ${{ parameters.location }} --name $kvName --resource-group $rgName  --subscription ${{ parameters.subscriptionName }} --enabled-for-deployment true --enabled-for-template-deployment true --tags $tags)
        
        kvId=$(echo $newKv | jq .id)
        echo "##vso[task.setvariable variable=kvId]$kvId"

        echo "Grant Service connection permissions on the KV"
        az keyvault set-policy --name $kvName \
          --certificate-permissions backup create get import list listissuers recover restore update \
          --secret-permissions backup delete get list recover restore set \
          --object-id $oid

        echo "Add build agent ip $agentIp to KV $kvName"
        agentIp=$(curl http://ifconfig.me/ip)/32
        az keyvault network-rule add \
          --resource-group $rgName \
          --name $kvName \
          --ip-address $agentIp

        # Whitelist the subnet the VMs are on (if they are there)
        subnetId=$(az network vnet subnet show --resource-group "cvp-recordings-${{ parameters.env }}-rg" --vnet-name "cvp-recordings-${{ parameters.env }}-vnet" --name "wowza" --query id --output tsv)
        echo "Adding vm subnet ${subnetId} to KV"
        az keyvault network-rule add --resource-group $rgName --name $kvName --subnet $subnetId

        echo "Default Deny other traiffic apart form Azure Services"
        az keyvault update \
          --resource-group $rgName \
          --name $kvName \
          --bypass AzureServices \
          --default-action Deny
 
  - task: AzureCLI@2
    displayName: 'Get Dynatrace tokens'
    inputs:
      azureSubscription: '${{ parameters.subscriptionName }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        kvName="$(kvName)"
        oid=$(oid)
        echo "Logged in as oid $oid"

        echo "Copy Dynatrace env token from $(infra_kv)"
        az keyvault secret download --id https://$(infra_kv).vault.azure.net/secrets/$(dynatrace_token) --file dynatrace-token

        echo "Import Dynatrace env token to KV $kvName"
        az keyvault secret set --name $(dynatrace_token) --file dynatrace-token --vault-name $kvName --verbose
   
  - task: AzureCLI@2
    displayName: 'Get Certificates'
    inputs:
      azureSubscription: '${{ parameters.subscriptionName }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        kvName="$(kvName)"
        oid=$(oid)
        env="${{ parameters.env }}"
        certName="${{ parameters.certName }}"
        kvNamePrefix="$(kv_name_prefix)"
        sourceKvName="$kvNamePrefix-$env"
        echo "Logged in as oid $oid"

        echo "Copy wildcard cert from cftapps"
        az keyvault secret download --id https://$sourceKvName.vault.azure.net/secrets/$certName -f cert-cft.pfx

        base64 -d cert-cft.pfx > cert-up.pfx

        import(){
            echo "Import the cert to our new KV $kvName"
            az keyvault certificate import --file cert-up.pfx --vault-name $kvName --name $certName --verbose
        }

        echo "Check if cert exists"
        kvSecret=$(az keyvault secret show --id https://$kvName.vault.azure.net/secrets/$certName --query "id")
        if [ "$kvSecret" = "" ]; then
            echo "Cert doesn't exist"
            import
        else
            echo "Cert exists"
            echo "Get Existing cert from CVP"
            az keyvault secret download --id https://$kvName.vault.azure.net/secrets/$certName -f cert-cvp.pfx
            base64 -d cert-cvp.pfx > cert-existing.pfx

            openssl base64 -in cert-existing.pfx -out cert-existing.pem
            openssl base64 -in cert-up.pfx -out cert-up.pem
            echo ""
            echo "up"
            cat cert-up.pem
            echo ""
            echo "existing"
            cat cert-existing.pem

            if cmp -s cert-up.pem cert-existing.pem; then
                echo "No Change in Cert"
            else
                echo "Change Required in Cert"
                import
            fi
        fi

        echo "Download the cert as a pem file"
        az keyvault certificate download --id https://$kvName.vault.azure.net/certificates/$certName -f cert.pem
        certPath=`pwd`/cert.pem

        echo "Capture cert thumbprint and secret resource id"
        cert=$(az keyvault certificate show --id https://$kvName.vault.azure.net/certificates/$certName)
        thumbprint=$(echo $cert | jq .x509ThumbprintHex)
        secretId=$(echo $cert | jq .sid)

        echo "##vso[task.setvariable variable=certPath]$certPath"
        echo "##vso[task.setvariable variable=secretId]$secretId"
        echo "##vso[task.setvariable variable=thumbprint]$thumbprint"
  
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: $(System.DefaultWorkingDirectory)/*.pfx  # Required  # The folder or file path to publish. This can be a fully-qualified path or a path relative to the root of the repository. Wildcards are not supported. [Variables](https://go.microsoft.com/fwlink/?LinkID=550988) are supported. Example: $(Build.ArtifactStagingDirectory)
      ArtifactName: certs  # Required  # The name of the artifact to create in the publish location.
      ArtifactType: Container # Options: 'Container', 'FilePath' # Required  # Choose whether to store the artifact in Azure Pipelines, or to copy it to a file share that must be accessible from the build agent.


  - task: AzureCLI@2
    displayName: 'Create SSH Credentials'
    inputs:
      azureSubscription: '${{ parameters.subscriptionName }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        rgName="$(rgName)"
        kvName="$(kvName)"
        oid=$(oid)
        echo "Logged in as oid $oid"

        kvId=$(kvId)

        echo "Check if the ssh keypair is there, else generate one"
        sshPrivKeyName="cvp-ssh-priv-key"
        sshPubKeyName="cvp-ssh-pub-key"

        sshResult=$(az keyvault secret show --name ${sshPubKeyName} --vault-name ${kvName} --query value -o tsv)
        echo "az keyvault secret show --name ${sshPubKeyName} --vault-name ${kvName} --query value -o tsv"
        echo "sshResult = ${sshResult}"

        pubKey=$sshResult

        if [ "$sshResult" = "" ]; then
          echo "Create new SSH keypair"
          ssh-keygen -f ./cvp -t rsa -b 4096 -q -N ""
          az keyvault secret set --name ${sshPrivKeyName} --vault-name ${kvName} --file ./cvp
          az keyvault secret set --name ${sshPubKeyName} --vault-name ${kvName} --file ./cvp.pub
          pubKey=`cat ./cvp.pub`
        fi

        echo "##vso[task.setvariable variable=pubKey]$pubKey"

  - task: AzureCLI@2
    displayName: Get Log Analytics Workspace Subscription ID by name
    inputs:
      azureSubscription: '${{ parameters.subscriptionName}}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        subscriptionId=$(az account show -s $(ws_sub_name) --query id -o tsv)

        echo "$(ws_sub_name) == ${subscriptionId}"
        echo "##vso[task.setvariable variable=ws_sub_id]$subscriptionId"
